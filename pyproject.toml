[project]
name = "text_mate_backend"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "dependency-injector>=4.46.0",
    "dspy>=2.6.2",
    "fastapi[standard]>=0.115.8",
    "llama-index-core>=0.12.34.post1",
    "llama-index-llms-openai>=0.3.38",
    "llama-index-llms-openai-like>=0.3.4",
    "llama-index-readers-file>=0.4.7",
    "openai>=1.70.0",
    "python-dotenv>=1.0.1",
    "requests>=2.32.3",
    "returns>=0.25.0",
    "structlog>=25.2.0",
    "tqdm>=4.67.1",
    "types-requests>=2.32.0.20241016",
    "types-setuptools>=75.8.0.20250110",
    "types-tqdm>=4.67.0.20250417",
]

[dependency-groups]
dev = [
    "coverage>=7.6.12",
    "pytest>=8.3.5",
    "pytest-mock>=3.14.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.22.0",
    "basedpyright>=1.27.1",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.2",
    "mypy>=1.15.0",
    "version-pioneer>=0.0.13",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/text_mate_backend"]

[tool.ruff]
# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Add rules to enable
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
]

# Ignore specific rules
ignore = []

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"

# Indent with spaces, rather than tabs.
indent-style = "space"

# Respect magic trailing commas.
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
# Group imports by type (standard library, third-party, first-party).
combine-as-imports = true
force-wrap-aliases = true

[tool.mypy]
# Enable returns plugin
plugins = ["returns.contrib.mypy.returns_plugin"]
# Python version
python_version = "3.13"
# Path to look for imports
mypy_path = ["src"]
# Strict mode - catches more bugs but can be stricter
strict = true
# Disallow dynamic typing
disallow_any_unimported = false
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# None and Optional handling
no_implicit_optional = true
strict_optional = true
# Warnings as errors
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
# Error messages
pretty = true
show_column_numbers = true
show_error_context = true
# Advanced
exclude = ["tests/", "venv/", ".venv/"]
implicit_reexport = false
# Allow for untyped implementations in specific cases
allow_untyped_globals = false
# Package configuration
namespace_packages = true
explicit_package_bases = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--import-mode=importlib",
]
pythonpath = ["src"]
